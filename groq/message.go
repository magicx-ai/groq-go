package groq

/*
For more information, see the Groq documentation: https://console.groq.com/docs/api-reference
*/

type MessageRole string

const (
	MessageRoleSystem    MessageRole = "system"
	MessageRoleUser      MessageRole = "user"
	MessageRoleAssistant MessageRole = "assistant"
)

// Message represents a message in the chat completion request.
type Message struct {
	Role    MessageRole `json:"role"`    // Role of the message sender (e.g., "user" or "assistant")
	Content string      `json:"content"` // Content of the message
}

// TODO(@Kcrong): Handle SystemMessage, UserMessage, AssistantMessage, ToolMessage in the completion response.

type SystemMessage struct {
	Content    *string `json:"content,omitempty"`      // The contents of the system message.
	Name       *string `json:"name,omitempty"`         // An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Role       *string `json:"role,omitempty"`         // The role of the messages author, in this case system.
	ToolCallID *string `json:"tool_call_id,omitempty"` // DO NOT USE. This field is present because OpenAI allows it and users send it.
}

type ImageURL struct {
	Detail *string `json:"type,omitempty"` // Specifies the detail level of the image.
	URL    *string `json:"url,omitempty"`  // Either a URL of the image or the base64 encoded image data.
}

type ContentPart struct {
	ImageURL *ImageURL `json:"image_url,omitempty"` // The image URL content part.
	Text     *string   `json:"text,omitempty"`      // The text content.
	Type     *string   `json:"type,omitempty"`      // The type of the content part.
}

type UserMessage[ContentType string | []ContentPart] struct {
	Content    *ContentType `json:"content,omitempty"`      // The contents of the user message.
	Name       *string      `json:"name,omitempty"`         // An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Role       *string      `json:"role,omitempty"`         // The role of the message's author, in this case user.
	ToolCallID *string      `json:"tool_call_id,omitempty"` // DO NOT USE. This field is present because OpenAI allows it and users send it.
}

type ToolCallFunction struct {
	Arguments *string `json:"arguments,omitempty"` // The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Name      *string `json:"name,omitempty"`      // The name of the function to call.
}

type ToolCall struct {
	Function *ToolCallFunction `json:"function,omitempty"` // The function call that the model called.
	ID       *string           `json:"id,omitempty"`       // The ID of the tool call.
	Type     *string           `json:"type,omitempty"`     // The type of the tool. Currently, only function is supported.
}

type AssistantMessage struct {
	Content    *string     `json:"content,omitempty"`      // The contents of the assistant message. Required unless tool_calls or function_call is specified.
	Name       *string     `json:"name,omitempty"`         // An optional name for the participant. Provides the model information to differentiate between participants of the same role.
	Role       *string     `json:"role,omitempty"`         // The role of the message's author, in this case assistant.
	ToolCallID *string     `json:"tool_call_id,omitempty"` // DO NOT USE. This field is present because OpenAI allows it and users send it.
	ToolCalls  *[]ToolCall `json:"tool_calls,omitempty"`   // The tool calls generated by the model, such as function calls.
}

type ToolMessage struct {
	Content    *string `json:"content,omitempty"`      // The contents of the tool message.
	Name       *string `json:"name,omitempty"`         // DO NOT USE. This field is present because OpenAI allows it and users send it.
	Role       *string `json:"role,omitempty"`         // The role of the message's author, in this case tool.
	ToolCallID *string `json:"tool_call_id,omitempty"` // Tool call that this message is responding to.
}
